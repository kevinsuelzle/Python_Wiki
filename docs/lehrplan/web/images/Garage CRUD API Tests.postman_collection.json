{
	"info": {
		"_postman_id": "6468ece6-9fe1-425a-9e78-ce99f2ea92d7",
		"name": "Garage CRUD API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7362946"
	},
	"item": [
		{
			"name": "POST Create New",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ensure the success field is set to true\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('success', true);",
							"});",
							"",
							"pm.test(\"response should have message and license plate\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.have.jsonBody(\"message\");",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"",
							"    const responseData = pm.response.json();",
							"    const message = responseData.message;",
							"   ",
							"    pm.expect(message).to.contain(\"KN-IT-2032\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"license_plate\": \"KN-IT-2032\",\n    \"parking_spot\": \"1A\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/car",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"car"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create Existing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Ensure the success field is set to false\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('success', false);",
							"});",
							"",
							"pm.test(\"Error Message\", function () {",
							"    const responseData = pm.response.json();",
							"    const message = responseData.message;",
							"",
							"    pm.expect(message).to.contain(\"ist bereits geparkt.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"license_plate\": \"KN-IT-2032\",\n    \"parking_spot\": \"5C\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/car",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"car"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.cars).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    const cars = responseData.cars;",
							"    ",
							"    pm.expect(cars).to.be.an('array');",
							"    cars.forEach(function(car) {",
							"        pm.expect(car).to.be.an('object');",
							"        pm.expect(car).to.have.property('check_in');",
							"        pm.expect(car).to.have.property('id');",
							"        pm.expect(car).to.have.property('license_plate');",
							"        pm.expect(car).to.have.property('parking_spot');",
							"        pm.expect(car).to.have.property('pick_up');",
							"    });",
							"});",
							"",
							"pm.test(\"Check_in is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    const cars = responseData.cars;",
							"    ",
							"    pm.expect(cars).to.be.an('array');",
							"    cars.forEach(function(car) {",
							"        pm.expect(car.check_in).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);",
							"    });",
							"});",
							"",
							"pm.test(\"License plate is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    const cars = responseData.cars;",
							"    ",
							"    pm.expect(cars).to.be.an('array');",
							"    cars.forEach(function(car) {",
							"        pm.expect(car.license_plate).to.be.a('string').and.to.have.lengthOf.at.least(1, \"License plate should not be empty\");",
							"    });",
							"});",
							"",
							"pm.test(\"Ensure the success field is set to true\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('success', true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/cars",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET by Kennzeichen",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ensure the success field is set to true\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('success', true);",
							"});",
							"",
							"pm.test(\"Parking Spot\", function () {",
							"    const responseData = pm.response.json();",
							"    const message = responseData.message;",
							"",
							"    pm.expect(message).to.contain(\"Parkplatz 1A\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/car/KN-IT-2032",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"car",
						"KN-IT-2032"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Parking Spot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"pm.test(\"Ensure the success field is set to true\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('success', true);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\": \"change_parking\",\n    \"parking_spot\": \"5C\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/car/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"car",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Pick Up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Ensure the success field is set to true\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('success', true);",
							"});",
							"",
							"",
							"pm.test(\"Verify the response format is JSON\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\": \"pick_up\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/car/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"car",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Request has success value of true\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Deleted Message\", function () {",
							"    const responseData = pm.response.json();",
							"    const message = responseData.message;",
							"",
							"    pm.expect(message).to.contain(\"gelöscht.\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/car/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"car",
						"1"
					]
				}
			},
			"response": []
		}
	]
}